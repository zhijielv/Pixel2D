//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data;
using Framework.Scripts.Manager;
using Sirenix.OdinInspector;
using UnityEngine.UI;
using System;
using System.Threading.Tasks;
using Cinemachine;
using DG.Tweening;
using Framework.Scripts.Constants;
using HutongGames.PlayMaker;
using Rewired;
using Sirenix.Utilities;
using UnityEngine;
using UnityEngine.AddressableAssets;
using UnityEngine.ResourceManagement.ResourceProviders;
using UnityEngine.SceneManagement;

namespace Framework.Scripts.UI.View
{
    using Base;
    using System;
    using UnityEngine;
    
    public partial class Player_View : ViewBase
    {
        public string HeroName = "";
        public float speed = 4f;
        public Player player;

        private GameObject mouseTarget;
        private async void OnEnable()
        {
            if (!ReInput.isReady) return;
            player = ReInput.players.GetPlayer(0);
            mouseTarget = await CameraManager.Instance.CreateMouseTarget();
            mouseTarget.GetComponent<SpriteRenderer>().color = Color.clear;
            // Subscribe to input events
            AddInputEventDelegate(TestX, UpdateLoopType.Update, InputActionEventType.AxisActive, "MoveX");
            // AddInputEventDelegate(TestX, UpdateLoopType.Update, InputActionEventType.AxisInactive, "MoveX");
            // AddInputEventDelegate(TestY, UpdateLoopType.Update, InputActionEventType.AxisActive, "MoveY");
            // AddInputEventDelegate(TestY, UpdateLoopType.Update, InputActionEventType.AxisInactive, "MoveY");
            
            // Rewired按钮，获取Action为Fire，按下和释放的回调；
            AddInputEventDelegate(TestButton, UpdateLoopType.Update, InputActionEventType.ButtonJustPressed, "Fire");
            // AddInputEventDelegate(TestButton, UpdateLoopType.Update, InputActionEventType.ButtonJustReleased, "Fire");
            AddInputEventDelegate(TestWheel, UpdateLoopType.Update, InputActionEventType.AxisActive, "Wheel");
            AddInputEventDelegate(TestTarget, UpdateLoopType.Update, InputActionEventType.AxisActive, "MouseHorizontal");
            AddInputEventDelegate(TestTarget, UpdateLoopType.Update, InputActionEventType.AxisActive, "MouseVertical");
            AddInputEventDelegate(TestAStar, UpdateLoopType.Update, InputActionEventType.ButtonJustPressed, "MoveToClick");

            // TestListenerFunc方法监听EventConstants.StartGame事件
            AddEventListener(EventConstants.StartGame, TestListenerFunc);
            
            // 自己拼的ui，监听事件
            AddButtonClickEvent(LoadLevel_Button, LoadLevel);
            AddButtonClickEvent(LoadAvatar_Button, LoadAvatar);
            AddButtonClickEvent(SetSpeed_Button, SetSpeed);
        }

        public void TestAStar(InputActionEventData data)
        {
            if(!LevelManager.Instance.isLevelLoaded) return;
            
        }
        
        private void TestListenerFunc(EventData data)
        {
            Debug.Log(GlobalConfig<UiScriptableObjectsManager>.Instance.UiScriptableObjectsList.Length);
            Debug.Log($"{data.Type}    {data.Data}");
        }

        private void OnDisable()
        {
            Disable();
        }

        public void TestX(InputActionEventData data)
        {
            if(ObjectManager.Instance.mainPlayer == null) return;
            float direction = data.GetAxis() > 0 ? 1 : -1;
            ObjectManager.Instance.mainPlayer.transform.localScale = new Vector3(direction, 1, 1);
        }

        public void TestY(InputActionEventData data)
        {
            if(ObjectManager.Instance.mainPlayer == null) return;
            ObjectManager.Instance.mainPlayer.transform.GetComponent<Transform>().DOBlendableMoveBy(Vector3.up * data.GetAxis() / 100 * speed, 0.1f);
        }

        public void TestButton(InputActionEventData data)
        {
            Debug.Log($"Button Fire!  {data.GetButton()}");
            // EventManager.Instance.DispatchEvent(EventConstants.StartGame);
        }

        public void TestTarget(InputActionEventData inputActionEventData)
        {
            if (player == null) return;
            if (mouseTarget == null) return;
            if(CameraManager.Instance.playerVCamera == null) return;
            CinemachineFramingTransposer vcam =
                CameraManager.Instance.playerVCamera
                    .GetComponent<CinemachineVirtualCamera>()
                    .GetCinemachineComponent<CinemachineFramingTransposer>();
            float cameraDistance = vcam.m_CameraDistance;
            Vector2 mouseScreenPosition = player.controllers.Mouse.screenPosition;
            Vector3 point = Camera.main.ScreenToWorldPoint(new Vector3(mouseScreenPosition.x, mouseScreenPosition.y, cameraDistance));
            point.z = 0;
            mouseTarget.transform.position = point;
            mouseTarget.GetComponent<SpriteRenderer>().sortingOrder = 2;
        }
        
        // 鼠标滑轮缩放视野
        public void TestWheel(InputActionEventData data)
        {
            if(CameraManager.Instance.playerVCamera == null) return;
            float orthographicSize = CameraManager.Instance.playerVCamera.GetComponent<CinemachineVirtualCamera>().m_Lens.OrthographicSize;
            CameraManager.Instance.playerVCamera.GetComponent<CinemachineVirtualCamera>().m_Lens.OrthographicSize = 
                Mathf.Clamp(orthographicSize - data.GetAxisDelta() / 2.0f, CameraManager.MINOrthographicSize, CameraManager.MAXOrthographicSize);;
        }

        public async void LoadLevel()
        {
            LevelManager.Instance.levelType = LevelType.yanjiang;
            await LevelManager.Instance.LoadLevel();
        }

        public async void LoadAvatar()
        {
            if (ObjectManager.Instance.mainPlayer != null)
            {
                CameraManager.Instance.RemoveTarget(ObjectManager.Instance.mainPlayer);
                AddressableManager.Instance.ReleaseInstance(ObjectManager.Instance.mainPlayer);
            }
            await ObjectManager.Instance.LoadPlayerAvatar(HeroName, LevelManager.Instance.transform);
            FsmFloat fsmSpeed = ObjectManager.Instance.mainPlayer.GetComponent<PlayMakerFSM>().FsmVariables.FindFsmFloat("Speed");
            fsmSpeed = speed;
            Speed_InputField.text = speed.ToString();
            
            CameraManager.Instance.CreatePlayerCamera();
            CameraManager.Instance.AddTarget(ObjectManager.Instance.mainPlayer);
        }

        public void SetSpeed()
        {
            if(!ObjectManager.Instance.mainPlayer) return;
            FsmFloat fsmSpeed = ObjectManager.Instance.mainPlayer.GetComponent<PlayMakerFSM>().FsmVariables.FindFsmFloat("Speed");
            float inputSpeed = Convert.ToSingle(Speed_InputField.text);
            if (inputSpeed > 0)
            {
                fsmSpeed.Value = inputSpeed;
                speed = inputSpeed;
            }
        }
    }
}
